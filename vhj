Mapping Name

Update STG_LOAD_STATUS

üîπ Purpose

This mapping updates the load status of transaction-level records in the staging and summary tables.
It takes as input both successfully loaded and rejected transactions from previous processing, normalizes them, assigns audit metadata, merges and deduplicates them, and executes SQL updates through the MUT component to ensure downstream tables accurately reflect the latest exception or failure status.

üîπ Source Files
1Ô∏è‚É£ Loaded File

Path/Type: ~$AI_DML/kyc_interface_giw_main_table.dml

Metadata Type: ${TABLE}_type

Purpose: Contains successfully loaded LR transactions from the previous stage.

Fields:
id, id_type, client_type, country, month, year, batch_dt, feed_type, load_status, lst_upd_dt, lst_upd_id, lst_upd_time

2Ô∏è‚É£ Rej Txn With Error

Path/Type:
~$AI_DML/kyc_interface_giw_main_table.dml
plus ~$AB_HOME/include/error-info-type.dml

Metadata Type:
Combines ${TABLE}_type with error_info_t.

Purpose: Contains rejected transactions or those with transformation/load failures.

Additional Fields:
error_message, error_code, error_time

Role: Used to identify failed records and update their status as EXCEPTION-FAILED.

üîπ Transformations and Business Logic
üî∏ Multi Reformat

Count: 2 (Two input streams)

Input 0: Loaded File

Input 1: Rej Txn With Error

Purpose: Standardizes data from both streams into a single, consistent schema.

Business Logic:

For Loaded File:

out.client_type = in.giw_client_type

out.load_status = 'EXCEPTION'

out.lst_upd_dt = (date("YYYYMMDD")) now()

out.lst_upd_id = '${CREATE_ID}'

out.lst_upd_time = datetime_to_unixtime(utc_now()) * 100

For Rej Txn With Error:

out.client_type = in.GIW_BATCH_EXCP_LOG.giw_client_type

out.load_status = 'EXCEPTION-FAILED'

Other audit fields same as above.

Output Metadata:

record
    utf8 string(160) id;
    utf8 string(20)  id_type;
    utf8 string(1)   client_type;
    utf8 string(10)  load_status;
    date("YYYYMMDD") lst_upd_dt;
    utf8 string(25)  lst_upd_id;
    decimal(15)      lst_upd_time;
end;


Purpose Summary: Adds consistent audit metadata to every record and differentiates between successful and failed exception flows.

üî∏ Concatenate

Purpose: Merges both output streams from Multi Reformat into one flow.

Logic: Performs a union of both ‚ÄúEXCEPTION‚Äù and ‚ÄúEXCEPTION-FAILED‚Äù streams without filtering or transformation.

Output Layout: Same as Multi Reformat.

üî∏ Sort

Key: {id; batch_dt; client_type; country; month; year}

Purpose: Orders the records to prepare for deduplication.

Max Core: 100663296

Logic: Sorting ensures all duplicate entries (for same ID and time window) are grouped together for consistent deduplication.

üî∏ Dedup

Key: {id; batch_dt; client_type; country; month; year}

Select: last

Check-Sort: True

Purpose: Removes duplicate records that share the same unique key.

Business Logic: Keeps only the last occurrence of each key combination, preserving the latest exception state.

üî∏ MUT (Multi Update Table)

Batch Size: 1 (per-row commits for safe updates)

Commit Table: $COMMIT_TABLE

Primary SQL Scripts:

$AI_SQL/kyc_interface_giw_TRADE_TXN_SMRY_load_status_update.sql

$AI_SQL/kyc_interface_giw_TRADE_TXN_SMRY_JURIS_load_status_update.sql

$AI_SQL/kyc_interface_giw_TRADE_TXN_COMMODITY_SMRY_load_status_update.sql

$AI_SQL/kyc_interface_giw_TRADE_TXN_LC_SMRY_JURIS_load_status_update.sql

SQL Function: Each updates one of the main trade summary tables with the record‚Äôs load status and audit columns.

Transform Input:
All use the same DML layout ‚Üí ${AI_DML}/kyc_interface_giw_main_table.dml

Business Logic (Sentence Form):

Each record drives four SQL updates corresponding to different summary dimensions.

The SQLs set LOAD_STATUS, LST_UPD_DT, LST_UPD_ID, and LST_UPD_TIME in the target tables.

The commit table ensures transactional integrity across multiple update operations.

Failed SQL executions are redirected to Error/Reject ports.

Logs are captured for all operations, successful or failed.

üîπ Reject & Error Handling
File	Purpose	Content / DML
Reject File	Captures records rejected during transformation or load	${TABLE}_type + error_message
Err File	Stores SQL-level errors from MUT	error_info_t
Log File	Audit trail for all executed updates (success/failure, timestamps, counts)	log_info_t
Unused File	Collects unprocessed log fragments from Gather component	Standard layout
üîπ Target Tables Updated by MUT

TRADE_TXN_SMRY

TRADE_TXN_SMRY_JURIS

TRADE_TXN_COMMODITY_SMRY

TRADE_TXN_LC_SMRY_JURIS

All updates apply the following:

LOAD_STATUS = 'EXCEPTION' or 'EXCEPTION-FAILED'

LST_UPD_DT = current date

LST_UPD_ID = ${CREATE_ID}

LST_UPD_TIME = epoch timestamp (ms)

üîπ End-to-End Data Flow Summary (Business Logic Narrative)

The Loaded File and Rejected Transactions act as dual input streams for the status update process.
Both are standardized in Multi Reformat, where audit fields are populated and statuses (EXCEPTION, EXCEPTION-FAILED) are assigned.
The data is merged using Concatenate, sorted by composite business keys, and deduplicated to retain only the most recent instance of each transaction.
Finally, the MUT component executes four SQL scripts that update the corresponding staging and summary tables, stamping accurate load status and timestamps for every transaction.
Any failed or invalid updates are logged and routed to respective error and reject files for remediation.
This ensures full reconciliation between data ingestion, exception management, and downstream KYC reporting.
